create table if not exists sources (
    source_name text primary key not null
);

create table if not exists physical_devices (
    uid integer generated always as identity primary key,
    source_name text not null references sources,
    name text not null,
    location point,
    last_seen timestamptz,
    -- Store only top level key value pairs here; it is used
    -- for quickly finding a device using information carried
    -- in a message such as a deveui or sensor group id.
    source_ids jsonb,
    -- Store more complete information about the source device
    -- in this column. Information such as description or
    -- attributes that may be useful to downstream processes
    -- can go here.
    -- The correlation ID of the message that caused a device
    -- to be created should also be stored in here under the
    -- key creation-correlation-id.
    properties jsonb not null default '{}'
);

create table if not exists physical_timeseries ( 
    uid integer generated always as identity primary key,
    physical_uid integer not null references physical_devices(uid),
    ts timestamptz not null,
    -- The message is stored in the brokers format as a JSONB object.
    json_msg jsonb not null
);

create table if not exists raw_messages (
    uid integer generated always as identity primary key,
    source_name text not null references sources,
    -- Some front-end-processors will have the physical uid
    -- available when they write these messages so include this
    -- as an optional column. The split processing in TTN could
    -- have this updated by the second process, using the correlation id
    -- to find the raw_messages row after it has the physical device.
    physical_uid integer,
    -- The correlation ID must be generated by the front end
    -- processors that receive the messages.
    correlation_id uuid unique not null,
    ts timestamptz not null,
    -- If the source system uses JSON for its message format
    -- then the messages get stored in this column.
    json_msg jsonb,
    -- If the source system uses CSV or similar then the messages
    -- get stored in this column.
    text_msg text
);

create table if not exists device_notes (
    uid integer generated always as identity primary key,
    physical_uid integer references physical_devices(uid),
    ts timestamptz not null default now(),
    note text not null
);

create table if not exists device_blobs (
    uid integer generated always as identity primary key,
    physical_uid integer references physical_devices(uid),
    ts timestamptz not null default now(),
    data bytea not null
);

create table if not exists logical_devices (
    uid integer generated always as identity primary key,
    name text not null,
    location point,
    last_seen timestamptz,
    properties jsonb not null default '{}'
);

create table if not exists physical_logical_map (
    -- Having all columns in the primary key means there cannot be two
    -- mapping rows for the same devices at the same time.
    physical_uid integer not null references physical_devices(uid),
    logical_uid integer not null references logical_devices(uid),
    start_time timestamptz not null default now(),
    end_time timestamptz,
    constraint end_gt_start check (end_time > start_time),
    unique (logical_uid, start_time),
    primary key(physical_uid, logical_uid, start_time)
);

create table if not exists users(
    uid integer generated always as identity primary key,
    username text not null unique,
    salt text not null,
    password text not null,
    auth_token text not null,
    valid boolean not null,
    read_only boolean default True not null
);

create index if not exists pd_src_id_idx on physical_devices using GIN (source_ids);

insert into sources values ('ttn'), ('greenbrain'), ('wombat'), ('ydoc'), ('ict_eagleio');

-- Enable the PostGIS extensions
-- CREATE EXTENSION postgis;
-- CREATE EXTENSION postgis_raster;
-- CREATE EXTENSION postgis_sfcgal;
